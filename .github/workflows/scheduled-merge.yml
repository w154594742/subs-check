name: 定时合并订阅节点

on:
  schedule:
    # 每天早上8点和晚上8点执行（UTC时间，对应北京时间16:00和次日04:00）
    - cron: '0 0,12 * * *'
  workflow_dispatch:  # 允许手动触发
  push:
    branches:
      - dev  # 添加dev分支的push触发，帮助GitHub Actions识别工作流

# 添加明确的权限
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  merge-subscriptions:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 创建配置目录
        run: |
          mkdir -p output
          
      - name: 准备配置文件
        run: |
          # 使用示例配置文件作为基础
          cp config/config.example.yaml config/config.yaml
          
          # 使用GitHub Secrets替换订阅链接
          # 完全清除示例配置文件中的订阅链接
          sed -i '/sub-urls:/,/^[^[:space:]-]/ {/sub-urls:/!d}' config/config.yaml
          
          # 添加来自GitHub Secrets的订阅链接
          # 将SUB_URLS按行分割并添加到配置文件
          echo "${{ secrets.SUB_URLS }}" | while IFS= read -r line || [ -n "$line" ]; do
            # 去除可能的引号和逗号
            cleaned_line=$(echo "$line" | sed 's/^[ \t"]*//;s/[ \t",]*$//')
            if [ ! -z "$cleaned_line" ]; then
              echo "  - $cleaned_line" >> config/config.yaml
            fi
          done
          
          # 设置其他配置项
          sed -i 's|check-interval:.*|check-interval: 1440|g' config/config.yaml  # 设置为24小时
          sed -i 's|print-progress:.*|print-progress: true|g' config/config.yaml  # 开启进度显示
          sed -i 's|keep-success-proxies:.*|keep-success-proxies: true|g' config/config.yaml  # 保留成功的节点
          
          # 如果有通知配置，设置通知
          if [ ! -z "${{ secrets.APPRISE_API_SERVER }}" ]; then
            sed -i "s|apprise-api-server:.*|apprise-api-server: \"${{ secrets.APPRISE_API_SERVER }}\"|g" config/config.yaml
          fi
          
          if [ ! -z "${{ secrets.RECIPIENT_URL }}" ]; then
            sed -i '/recipient-url:/,/^[a-z]/ { /recipient-url:/!d }' config/config.yaml
            echo "recipient-url:" >> config/config.yaml
            echo "  - ${{ secrets.RECIPIENT_URL }}" >> config/config.yaml
          fi
          
          # 如果有Mihomo API配置，设置Mihomo API
          if [ ! -z "${{ secrets.MIHOMO_API_URL }}" ]; then
            sed -i "s|mihomo-api-url:.*|mihomo-api-url: \"${{ secrets.MIHOMO_API_URL }}\"|g" config/config.yaml
          fi
          
          if [ ! -z "${{ secrets.MIHOMO_API_SECRET }}" ]; then
            sed -i "s|mihomo-api-secret:.*|mihomo-api-secret: \"${{ secrets.MIHOMO_API_SECRET }}\"|g" config/config.yaml
          fi
          
          # 设置保存方法
          if [ ! -z "${{ secrets.SAVE_METHOD }}" ]; then
            sed -i "s|save-method:.*|save-method: ${{ secrets.SAVE_METHOD }}|g" config/config.yaml
            
            # 根据保存方法设置相应的配置
            case "${{ secrets.SAVE_METHOD }}" in
              "gist")
                if [ ! -z "${{ secrets.GITHUB_GIST_ID }}" ]; then
                  sed -i "s|github-gist-id:.*|github-gist-id: \"${{ secrets.GITHUB_GIST_ID }}\"|g" config/config.yaml
                fi
                if [ ! -z "${{ secrets.GITHUB_TOKEN }}" ]; then
                  sed -i "s|github-token:.*|github-token: \"${{ secrets.GITHUB_TOKEN }}\"|g" config/config.yaml
                fi
                ;;
              "webdav")
                if [ ! -z "${{ secrets.WEBDAV_URL }}" ]; then
                  sed -i "s|webdav-url:.*|webdav-url: \"${{ secrets.WEBDAV_URL }}\"|g" config/config.yaml
                fi
                if [ ! -z "${{ secrets.WEBDAV_USERNAME }}" ]; then
                  sed -i "s|webdav-username:.*|webdav-username: \"${{ secrets.WEBDAV_USERNAME }}\"|g" config/config.yaml
                fi
                if [ ! -z "${{ secrets.WEBDAV_PASSWORD }}" ]; then
                  sed -i "s|webdav-password:.*|webdav-password: \"${{ secrets.WEBDAV_PASSWORD }}\"|g" config/config.yaml
                fi
                ;;
            esac
          else
            # 如果没有设置SAVE_METHOD，默认使用local 
            sed -i "s|save-method:.*|save-method: local|g" config/config.yaml
          fi
          
      - name: 运行合并订阅任务
        run: |
          # 创建一个脚本来监控Docker输出并在检测到"下次检查时间"时终止Docker
          cat > monitor.sh << 'EOF'
          #!/bin/bash
          
          # 启动Docker容器
          docker run --rm \
            -v ${{ github.workspace }}/config:/app/config \
            -v ${{ github.workspace }}/output:/app/output \
            ghcr.io/beck-8/subs-check:latest 2>&1 | while read line; do
              echo "$line"
              if [[ "$line" == *"下次检查时间"* ]]; then
                echo "检测到'下次检查时间'输出，终止Docker容器..."
                pkill -P $$ docker
                break
              fi
            done
          EOF
          
          # 添加执行权限
          chmod +x monitor.sh
          
          # 使用timeout作为备份，确保最多运行30分钟
          timeout 30m ./monitor.sh
          
          # 确保工作流继续执行
          exit 0
            
      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: merged-subscriptions
          path: output/
          retention-days: 1
          
      # 检查输出目录内容
      - name: 检查输出目录内容
        run: |
          echo "输出目录内容:"
          ls -la output/
          
      # 修复中文乱码问题
      - name: 修复中文乱码问题
        run: |
          echo "检查并修复中文乱码问题..."
          
          # 确保文件使用UTF-8编码
          if [ -f "output/all.yaml" ]; then
            # 移除Content-Type头
            if grep -q "Content-Type" "output/all.yaml"; then
              sed -i '1d' output/all.yaml
              echo "已移除Content-Type头"
            fi
            
            # 使用sed替换Unicode转义序列
            # 替换形如 \\U0001F1FA\\U0001F1F8 的国旗表情
            sed -i 's/\\\\U0001F1[A-F0-9][A-F0-9]\\\\U0001F1[A-F0-9][A-F0-9]/国家/g' output/all.yaml
            
            # 替换常见的中文Unicode转义
            sed -i 's/\\u4e2d\\u56fd/中国/g' output/all.yaml
            sed -i 's/\\u53f0\\u6e7e/台湾/g' output/all.yaml
            sed -i 's/\\u9999\\u6e2f/香港/g' output/all.yaml
            sed -i 's/\\u65e5\\u672c/日本/g' output/all.yaml
            sed -i 's/\\u97e9\\u56fd/韩国/g' output/all.yaml
            sed -i 's/\\u7f8e\\u56fd/美国/g' output/all.yaml
            sed -i 's/\\u65b0\\u52a0\\u5761/新加坡/g' output/all.yaml
            sed -i 's/\\u5370\\u5ea6/印度/g' output/all.yaml
            sed -i 's/\\u4fc4\\u7f57\\u65af/俄罗斯/g' output/all.yaml
            sed -i 's/\\u82f1\\u56fd/英国/g' output/all.yaml
            sed -i 's/\\u5fb7\\u56fd/德国/g' output/all.yaml
            sed -i 's/\\u6cd5\\u56fd/法国/g' output/all.yaml
            sed -i 's/\\u610f\\u5927\\u5229/意大利/g' output/all.yaml
            sed -i 's/\\u52a0\\u62ff\\u5927/加拿大/g' output/all.yaml
            sed -i 's/\\u6fb3\\u5927\\u5229\\u4e9a/澳大利亚/g' output/all.yaml
            
            echo "已处理 all.yaml 文件编码"
          fi
          
          if [ -f "output/all.txt" ]; then
            # 使用sed替换Unicode转义序列
            # 替换形如 \\U0001F1FA\\U0001F1F8 的国旗表情
            sed -i 's/\\\\U0001F1[A-F0-9][A-F0-9]\\\\U0001F1[A-F0-9][A-F0-9]/国家/g' output/all.txt
            
            # 替换常见的中文Unicode转义
            sed -i 's/\\u4e2d\\u56fd/中国/g' output/all.txt
            sed -i 's/\\u53f0\\u6e7e/台湾/g' output/all.txt
            sed -i 's/\\u9999\\u6e2f/香港/g' output/all.txt
            sed -i 's/\\u65e5\\u672c/日本/g' output/all.txt
            sed -i 's/\\u97e9\\u56fd/韩国/g' output/all.txt
            sed -i 's/\\u7f8e\\u56fd/美国/g' output/all.txt
            sed -i 's/\\u65b0\\u52a0\\u5761/新加坡/g' output/all.txt
            sed -i 's/\\u5370\\u5ea6/印度/g' output/all.txt
            sed -i 's/\\u4fc4\\u7f57\\u65af/俄罗斯/g' output/all.txt
            sed -i 's/\\u82f1\\u56fd/英国/g' output/all.txt
            sed -i 's/\\u5fb7\\u56fd/德国/g' output/all.txt
            sed -i 's/\\u6cd5\\u56fd/法国/g' output/all.txt
            sed -i 's/\\u610f\\u5927\\u5229/意大利/g' output/all.txt
            sed -i 's/\\u52a0\\u62ff\\u5927/加拿大/g' output/all.txt
            sed -i 's/\\u6fb3\\u5927\\u5229\\u4e9a/澳大利亚/g' output/all.txt
            
            echo "已处理 all.txt 文件编码"
          fi
          
          # 创建一个包含正确编码声明的HTML文件，用于访问YAML
          cat > output/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>订阅链接</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              h1 { color: #333; }
              .link-box { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
              .link-box h2 { margin-top: 0; color: #444; }
              .link-box a { display: block; margin: 10px 0; word-break: break-all; }
            </style>
          </head>
          <body>
            <h1>订阅链接</h1>
            <div class="link-box">
              <h2>Clash/Mihomo 格式</h2>
              <a href="all.yaml">all.yaml</a>
            </div>
            <div class="link-box">
              <h2>Base64 格式</h2>
              <a href="all.txt">all.txt</a>
            </div>
          </body>
          </html>
          EOF
          
      # 配置GitHub Pages
      - name: 配置GitHub Pages
        uses: actions/configure-pages@v3
          
      # 可选：将结果推送到仓库的gh-pages分支
      - name: 部署到GitHub Pages
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./output
          publish_branch: gh-pages
          force_orphan: true
          
      # 添加部署完成后的检查
      - name: 部署完成检查
        run: |
          echo "GitHub Pages部署已完成"
          echo "请访问 https://${{ github.repository_owner }}.github.io/subs-check/ 查看结果" 